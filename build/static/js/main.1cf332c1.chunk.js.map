{"version":3,"sources":["components/shaders/baseMaterial/BaseAnimationMaterial.js","components/shaders/baseMaterial/PhongAnimationMaterial.js","components/shaders/ParticleMaterial.js","components/particles/particles.js","components/shaders/RainParticleMaterial.js","components/shaders/RainParticleMaterialTwo.js","components/particles/rainParticles.js","components/cameraPathFinding/TouchPointScene.js","components/cameraPathFinding/store.js","components/cameraPathFinding/touchPointPath.js","components/cameraPathFinding/onScroll.js","components/cameraPathFinding/cameraPathFinding.js","index.js"],"names":["BaseAnimationMaterial","parameters","shaderFunctions","shaderParameters","shaderVertexInit","shaderTransformNormal","shaderTransformPosition","mainVertexFunctions","setValues","THREE","prototype","_concatVertexShader","_concatFunctions","this","join","_concatParameters","_concatVertexInit","_concatTransformNormal","_concatTransformPosition","setUniformValues","values","key","uniforms","uniform","value","type","set","copy","PhongAnimationMaterial","uniformValues","phongShader","merge","lights","vertexShader","fragmentShader","map","defines","normalMap","ShaderChunk","particleMaterial","vertexColors","flatShading","side","uTime","uDuration","specular","shininess","Particles","prefabGeometry","prefabBufferGeometry","mParticleSystem","aOffset","aAxisAngle","aStartPosition","aControlPoint1","aControlPoint2","aEndPosition","aColor","enabled","particleCount","mTime","console","log","useRef","Math","floor","sqrt","prefabFaceCount","faces","length","prefabIndicesCount","prefabVerticiesCount","vertices","prefabIndices","h","face","push","a","b","c","indexBuffer","Uint32Array","positionBuffer","Float32Array","i","offset","j","prefabVertex","x","y","z","k","setIndex","setAttribute","getAttribute","name","vA","vB","vC","normals","p1","p2","p3","cA","cB","array","fromArray","subVectors","cross","needUpdate","generatePositionAndIndexBuffers","delay","prefabVerticiesLength","randFloat","axis","angle","randFloatSpread","normalize","PI","randInt","l","color","setHSL","r","g","fillBufferData","useEffect","tick","update","requestAnimationFrame","current","material","position","intensity","distance","decay","ref","args","RainParticleMaterial","params","shadowShader","_concatMainVertexFunctions","uPosition","uProgress","opacity","emissive","roughness","RainMat2","replacedShader","shader","Object","assign","replace","attributes","match","main","metalness","mDuration","RainParticles","mSphere","multiplier","pLight","S","xzcoords","aStartPosBuffer","aEndPosBuffer","total","random","setupShaderProperties","indexes","vertexCount","bufferIndexes","attributeData","vertex","posAttribute","setupPositionAndIndexBuffer","p","newColor","geometry","castShadow","TouchPointScene","index","previousPath","nextPath","previousTouchPoint","nextTouchPoint","prevTouchPoint","create","get","camera","timeStepRate","cameraPaths","data","t","rotation","normal","binormal","scale","fov","currentTrack","currentPath","currentTouchPoint","destinationPos","direction","currentLocationIndex","isMoving","forwardObjPos","backObjPos","isCameraMoving","actions","init","startTouchPoint","backwardObjPos","initTwo","curve","startMove","v0","tubeBufferGeometryPath","v3","testMove","testMoveTwo","addEffect","move","getPointAt","stopMoveTest","moveInterpolation","stopMove","TouchPointPath","bufferGeometryActive","constructor","clamp","val","min","max","useYScroll","bounds","props","useSpring","config","slow","fn","useCallback","cy","xy","py","previous","memo","newY","bind","useGesture","onWheel","onDrag","domTarget","extend","OrbitControls","CameraControls","useThree","domElement","gl","controls","near","far","useFrame","autoRotate","enableZoom","App","useState","rainParticleEnabled","window","setTimeout","className","style","height","fallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cf332c1.chunk.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nexport default class BaseAnimationMaterial extends THREE.ShaderMaterial{\r\n\r\n    constructor(parameters) {\r\n        super();\r\n\r\n        this.shaderFunctions = [];\r\n        this.shaderParameters = [];\r\n        this.shaderVertexInit = [];\r\n        this.shaderTransformNormal = [];\r\n        this.shaderTransformPosition = [];\r\n        this.mainVertexFunctions = [];\r\n\r\n        this.setValues(parameters);\r\n    }\r\n};\r\n\r\n// abstract\r\nBaseAnimationMaterial.prototype._concatVertexShader = function() {\r\n  return '';\r\n};\r\n\r\nBaseAnimationMaterial.prototype._concatFunctions = function() {\r\n  return this.shaderFunctions.join('\\n');\r\n};\r\nBaseAnimationMaterial.prototype._concatParameters = function() {\r\n  return this.shaderParameters.join('\\n');\r\n};\r\nBaseAnimationMaterial.prototype._concatVertexInit = function() {\r\n  return this.shaderVertexInit.join('\\n');\r\n};\r\nBaseAnimationMaterial.prototype._concatTransformNormal = function() {\r\n  return this.shaderTransformNormal.join('\\n');\r\n};\r\nBaseAnimationMaterial.prototype._concatTransformPosition = function() {\r\n  return this.shaderTransformPosition.join('\\n');\r\n};\r\n\r\n\r\nBaseAnimationMaterial.prototype.setUniformValues = function(values) {\r\n  for (var key in values) {\r\n      if (key in this.uniforms) {\r\n          var uniform = this.uniforms[key];\r\n          var value = values[key];\r\n\r\n          // todo add matrix uniform types\r\n          switch (uniform.type) {\r\n              case 'c': // color\r\n                  uniform.value.set(value);\r\n                  break;\r\n              case 'v2': // vectors\r\n              case 'v3':\r\n              case 'v4':\r\n                  uniform.value.copy(value);\r\n                  break;\r\n              case 'f': // float\r\n              case 't': // texture\r\n                  uniform.value = value;\r\n          }\r\n      }\r\n  }\r\n};","import * as THREE from 'three';\r\nimport BaseAnimationMaterial from \"./BaseAnimationMaterial.js\"\r\n\r\nexport default class PhongAnimationMaterial extends BaseAnimationMaterial {\r\n\r\n    constructor(parameters, uniformValues) {\r\n        super(parameters);\r\n\r\n        var phongShader = THREE.ShaderLib['phong'];\r\n\r\n        this.uniforms = THREE.UniformsUtils.merge([phongShader.uniforms, this.uniforms]);\r\n        this.lights = true;\r\n        this.vertexShader = this._concatVertexShader();\r\n        this.fragmentShader = phongShader.fragmentShader;\r\n\r\n        // todo add missing default defines\r\n        uniformValues.map && (this.defines['USE_MAP'] = '');\r\n        uniformValues.normalMap && (this.defines['USE_NORMALMAP'] = '');\r\n\r\n        this.setUniformValues(uniformValues);\r\n  }\r\n\r\n};\r\n\r\n\r\nPhongAnimationMaterial.prototype._concatVertexShader = function() {\r\n  // based on THREE.ShaderLib.phong\r\n  return [\r\n      \"#define PHONG\",\r\n\r\n      \"varying vec3 vViewPosition;\",\r\n\r\n      \"#ifndef FLAT_SHADED\",\r\n\r\n      \"\tvarying vec3 vNormal;\",\r\n\r\n      \"#endif\",\r\n\r\n      THREE.ShaderChunk[ \"common\" ],\r\n      THREE.ShaderChunk[ \"uv_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"uv2_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"displacementmap_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n      THREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n      this._concatFunctions(),\r\n\r\n      this._concatParameters(),\r\n\r\n      \"void main() {\",\r\n\r\n      this._concatVertexInit(),\r\n\r\n      THREE.ShaderChunk[ \"uv_vertex\" ],\r\n      THREE.ShaderChunk[ \"uv2_vertex\" ],\r\n      THREE.ShaderChunk[ \"color_vertex\" ],\r\n      THREE.ShaderChunk[ \"beginnormal_vertex\" ],\r\n\r\n      this._concatTransformNormal(),\r\n\r\n      THREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n      THREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n      THREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n      THREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n      \"#ifndef FLAT_SHADED\", // Normal computed with derivatives when FLAT_SHADED\r\n\r\n      \"\tvNormal = normalize( transformedNormal );\",\r\n\r\n      \"#endif\",\r\n\r\n      THREE.ShaderChunk[ \"begin_vertex\" ],\r\n\r\n      this._concatTransformPosition(),\r\n\r\n      THREE.ShaderChunk[ \"displacementmap_vertex\" ],\r\n      THREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n      THREE.ShaderChunk[ \"skinning_vertex\" ],\r\n      THREE.ShaderChunk[ \"project_vertex\" ],\r\n      THREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n      \"\tvViewPosition = - mvPosition.xyz;\",\r\n\r\n      THREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n      THREE.ShaderChunk[ \"envmap_vertex\" ],\r\n      THREE.ShaderChunk[ \"lights_phong_vertex\" ],\r\n      THREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n      \"}\"\r\n\r\n  ].join( \"\\n\" );\r\n};\r\n\r\n","import * as THREE from \"three\";\r\nimport PhongAnimationMaterial from \"./baseMaterial/PhongAnimationMaterial.js\"\r\n\r\n// define the shader chunks here \r\nvar mDuration = 20;\r\nvar ShaderChunk = {};\r\n\r\nShaderChunk[\"animation_time\"] = \"float tDelay = aAnimation.x;\\nfloat tDuration = aAnimation.y;\\nfloat tTime = clamp(uTime - tDelay, 0.0, tDuration);\\nfloat tProgress = ease(tTime, 0.0, 1.0, tDuration);\\n\";\r\n\r\nShaderChunk[\"cubic_bezier\"] = \"vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t)\\n{\\n    vec3 tp;\\n    float tn = 1.0 - t;\\n\\n    tp.xyz = tn * tn * tn * p0.xyz + 3.0 * tn * tn * t * c0.xyz + 3.0 * tn * t * t * c1.xyz + t * t * t * p1.xyz;\\n\\n    return tp;\\n}\\n\";\r\n\r\nShaderChunk[\"ease_in_cubic\"] = \"float ease(float t, float b, float c, float d) {\\n  return c*(t/=d)*t*t + b;\\n}\\n\";\r\n\r\nShaderChunk[\"ease_in_quad\"] = \"float ease(float t, float b, float c, float d) {\\n  return c*(t/=d)*t + b;\\n}\\n\";\r\n\r\nShaderChunk[\"ease_out_cubic\"] = \"float ease(float t, float b, float c, float d) {\\n  return c*((t=t/d - 1.0)*t*t + 1.0) + b;\\n}\\n\";\r\n\r\nShaderChunk[\"quaternion_rotation\"] = \"vec3 rotateVector(vec4 q, vec3 v)\\n{\\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n\\nvec4 quatFromAxisAngle(vec3 axis, float angle)\\n{\\n    float halfAngle = angle * 0.5;\\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\\n}\\n\";\r\n\r\nconst particleMaterial  = new PhongAnimationMaterial({\r\n  vertexColors: THREE.VertexColors,\r\n  flatShading: THREE.FlatShading,\r\n  side: THREE.DoubleSide,\r\n  uniforms: {\r\n    uTime: {type: 'f', value: 0},\r\n    uDuration: {type: 'f', value: mDuration}\r\n  },\r\n  // i should have called this shaderFunction, otherwise the material\r\n  // is left in vertexfunctions\r\n  shaderFunctions: [\r\n    ShaderChunk['quaternion_rotation'],\r\n    ShaderChunk['cubic_bezier'],\r\n  ],\r\n\r\n  shaderVertexInit: [\r\n    // shaderVertexInit\r\n    'float tProgress = mod((uTime + aOffset), uDuration) / uDuration;',\r\n\r\n    'float angle = aAxisAngle.w * tProgress;',\r\n    'vec4 tQuat = quatFromAxisAngle(aAxisAngle.xyz, angle);',\r\n  ],\r\n\r\n  shaderTransformNormal: [\r\n    // shader transform normal \r\n    'objectNormal = rotateVector(tQuat, objectNormal);',\r\n  ],\r\n\r\n  shaderTransformPosition: [\r\n    // shaderTransformPosition\r\n    'transformed = rotateVector(tQuat, transformed);',\r\n    'transformed += cubicBezier(aStartPosition, aControlPoint1, aControlPoint2, aEndPosition, tProgress);'\r\n  ],\r\n  shaderParameters: [\r\n    'uniform float uTime;',\r\n    'uniform float uDuration;',\r\n    'attribute float aOffset;',\r\n    'attribute vec3 aStartPosition;',\r\n    'attribute vec3 aControlPoint1;',\r\n    'attribute vec3 aControlPoint2;',\r\n    'attribute vec3 aEndPosition;',\r\n    'attribute vec4 aAxisAngle;'\r\n  ],\r\n},\r\n// THREE.MeshPhongMaterial uniforms\r\n{\r\n  specular: 0xfff000,\r\n  shininess: 50\r\n}\r\n);\r\n\r\nexport default particleMaterial;\r\n\r\n\r\n","import * as THREE from 'three';\r\nimport React, {useRef,useEffect } from 'react'\r\n\r\nimport particleMaterial from \"../shaders/ParticleMaterial.js\"\r\n\r\nexport default function Particles({enabled}){\r\n\r\n    // https://codepen.io/zadvorsky/pen/qOYqGv?editors=1010\r\n    var prefabGeometry;\r\n    var prefabBufferGeometry;\r\n\r\n    var mParticleSystem; \r\n\r\n    var particleCount = 100000; // change number  \r\n\r\n    var aOffset;\r\n    var aAxisAngle; \r\n    var aStartPosition;\r\n    var aControlPoint1;\r\n    var aControlPoint2;\r\n    var aEndPosition;\r\n\r\n    var aColor;\r\n\r\n    var i,j, offset; \r\n\r\n    var mTime = 0.0; \r\n    var mTimeStep = (1/60);\r\n    var mDuration = 100; // change \r\n\r\n    const fillBufferData = (() => {\r\n        // then insert shader \r\n        // prefabBufferGeometry = new THREE.BufferGeometry();  \r\n        var prefabVerticiesLength = prefabGeometry.vertices.length; \r\n\r\n        prefabBufferGeometry.setAttribute('aOffset', new THREE.BufferAttribute(new Float32Array(particleCount * prefabVerticiesLength),1));\r\n        aOffset = prefabBufferGeometry.getAttribute('aOffset');\r\n\r\n        prefabBufferGeometry.setAttribute('aStartPosition', new THREE.BufferAttribute(new Float32Array(particleCount*3 * prefabVerticiesLength), 3));\r\n        aStartPosition = prefabBufferGeometry.getAttribute('aStartPosition');\r\n\r\n        prefabBufferGeometry.setAttribute('aControlPoint1', new THREE.BufferAttribute(new Float32Array(particleCount*3 * prefabVerticiesLength), 3));\r\n        aControlPoint1 = prefabBufferGeometry.getAttribute('aControlPoint1');\r\n\r\n        prefabBufferGeometry.setAttribute('aControlPoint2', new THREE.BufferAttribute(new Float32Array(particleCount*3 * prefabVerticiesLength), 3));\r\n        aControlPoint2 = prefabBufferGeometry.getAttribute('aControlPoint2');\r\n\r\n        prefabBufferGeometry.setAttribute('aEndPosition', new THREE.BufferAttribute(new Float32Array(particleCount*3 * prefabVerticiesLength), 3));\r\n        aEndPosition = prefabBufferGeometry.getAttribute('aEndPosition');\r\n        // console.log(aEndPosition.array);\r\n        prefabBufferGeometry.setAttribute('aAxisAngle', new THREE.BufferAttribute(new Float32Array(particleCount*4 * prefabVerticiesLength),4));\r\n        aAxisAngle = prefabBufferGeometry.getAttribute('aAxisAngle');\r\n\r\n        prefabBufferGeometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(particleCount*3 * prefabVerticiesLength) ,3));\r\n        aColor = prefabBufferGeometry.getAttribute('color');\r\n\r\n        console.log(aColor + \" buffer geometry\");\r\n\r\n        var delay;\r\n        // console.log(prefabGeometry.vertices.length + \" verticies length\")\r\n        var offset = 0;\r\n\r\n        for(var i = 0, offset = 0 ; i < particleCount; i++) {\r\n            delay = i / particleCount * mDuration; \r\n            // console.log(delay + \"delay \" + i );\r\n\r\n            for(var j = 0; j < prefabGeometry.vertices.length; j++) {\r\n                aOffset.array[offset++] = delay;\r\n                // console.log(aOffset.array[offset] + \"offset : \" + offset);\r\n            }\r\n\r\n        }\r\n        \r\n        // console.log(prefabBufferGeometry);\r\n\r\n        // https://codepen.io/zadvorsky/pen/qOYqGv\r\n        // https://codepen.io/zadvorsky/pen/MaVXPQ\r\n        // on shader chunks https://steemit.com/utopian-io/@clayjohn/learning-3d-graphics-with-three-js-or-advanced-materials-and-custom-shaders\r\n        // http://three-bas-examples.surge.sh/docs/index.html\r\n        \r\n        // buffer start positions\r\n        var x, y, z;\r\n\r\n        for(var i = 0, offset = 0; i < particleCount; i++ ){\r\n            x = -1000;\r\n            y = 0;\r\n            z = 0;\r\n\r\n            for(var j = 0; j < prefabGeometry.vertices.length; j++) {\r\n                aStartPosition.array[offset++] = x;\r\n                aStartPosition.array[offset++] = y;\r\n                aStartPosition.array[offset++] = z;\r\n            }\r\n        }\r\n\r\n\r\n        for(var i = 0, offset = 0; i < particleCount; i++) {\r\n            x = THREE.MathUtils.randFloat(-400, 400);\r\n            y = THREE.MathUtils.randFloat(400, 600);\r\n            z = THREE.MathUtils.randFloat(-1200, -800);\r\n            \r\n            for(var j = 0; j < prefabGeometry.vertices.length; j++){\r\n                aControlPoint1.array[offset++] = x;\r\n                aControlPoint1.array[offset++] = y;\r\n                aControlPoint1.array[offset++] = z; \r\n\r\n            }\r\n        }\r\n\r\n        for(var i = 0, offset = 0; i < particleCount; i++) {\r\n            x = THREE.MathUtils.randFloat(-400, 400);\r\n            y = THREE.MathUtils.randFloat(-600, -400);\r\n            z = THREE.MathUtils.randFloat(800, 1200);\r\n            \r\n            for(var j = 0; j < prefabGeometry.vertices.length; j++){\r\n                aControlPoint2.array[offset++] = x;\r\n                aControlPoint2.array[offset++] = y;\r\n                aControlPoint2.array[offset++] = z; \r\n\r\n            }\r\n        }\r\n\r\n        // buffer end position\r\n\r\n        for(var i = 0, offset = 0; i < particleCount; i++) {\r\n            x = 1000;\r\n            y = 0;\r\n            z = 0; \r\n\r\n            for(var j = 0; j < prefabGeometry.vertices.length; j++) {\r\n                aEndPosition.array[offset++] = x;\r\n                aEndPosition.array[offset++] = y;\r\n                aEndPosition.array[offset++] = z;\r\n\r\n            }\r\n        }\r\n\r\n        // console.log(\"test : \" + aEndPosition.array)\r\n        // // set up axis angle that can be used for \r\n        // // axis angle instance \r\n        var axis = new THREE.Vector3();\r\n        var angle = 0;\r\n        for(var i = 0, offset = 0; i < particleCount; i++){\r\n            // check here: https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n           axis.x = THREE.MathUtils.randFloatSpread(2) \r\n           axis.y = THREE.MathUtils.randFloatSpread(2) \r\n           axis.z = THREE.MathUtils.randFloatSpread(2)\r\n           axis.normalize(); \r\n\r\n        //    // place axis angle value via buffer here \r\n            angle = Math.PI * THREE.Math.randInt(16, 32);\r\n\r\n        //    // vary per particle // keep it constant \r\n           for(j = 0; j< prefabGeometry.vertices.length; j++) {\r\n                aAxisAngle.array[offset++] = axis.x;\r\n                aAxisAngle.array[offset++] = axis.y;\r\n                aAxisAngle.array[offset++] = axis.z;\r\n                aAxisAngle.array[offset++] = angle;\r\n           }\r\n        } \r\n        \r\n         // console.log(\"aAxis :\" + aAxisAngle.array );\r\n\r\n        // }\r\n\r\n        // // buffer color \r\n        var color = new THREE.Color();\r\n        var h,s,l;\r\n\r\n        for(var i = 0, offset = 0; i < particleCount; i++) {\r\n            h = i/particleCount * 50;\r\n            // s = THREE.MathUtils.randFloatSpread(0.59, 0.61);\r\n            l = THREE.MathUtils.randFloatSpread(0.7, 0.9);\r\n             s = 0.8;\r\n            // l = 0.5;\r\n\r\n            color.setHSL(h,s,l);\r\n            // console.log(\"loop\")\r\n            for(var j = 0; j < prefabGeometry.vertices.length; j++) {\r\n                aColor.array[offset++] = color.r;\r\n                aColor.array[offset++] = color.g;\r\n                aColor.array[offset++] = color.b; \r\n                // console.log('loop');\r\n            }\r\n\r\n        } \r\n        //console.log(\"a color \" + aColor.array);\r\n\r\n        // mParticleSystem.current.frustumCulled = false;\r\n        // console.log(prefabBufferGeometry);\r\n    })\r\n\r\n    const generatePositionAndIndexBuffers = (() => {\r\n\r\n        var segmentWidth = 20;\r\n        prefabGeometry = new THREE.PlaneGeometry(segmentWidth,segmentWidth);\r\n        var squareDimension = Math.floor(Math.sqrt(particleCount));\r\n\r\n        var prefabFaceCount = prefabGeometry.faces.length;\r\n        var prefabIndicesCount = prefabGeometry.faces.length * 3; // \r\n        var prefabVerticiesCount = prefabGeometry.vertices.length; \r\n        var prefabIndices = []; // for square prefab, 6 indices, we loop per face\r\n        // and push per 3 indices, via triangle;  \r\n\r\n        var idx = segmentWidth + 0.2;\r\n        var idy = segmentWidth + 0.2; \r\n    \r\n        // generate indices based on amount of faces in prefab\r\n        for (var h = 0; h < prefabFaceCount; h++) {\r\n            var face = prefabGeometry.faces[h];\r\n            prefabIndices.push(face.a, face.b, face.c);\r\n        }   \r\n        \r\n        var indexBuffer = new Uint32Array(particleCount * prefabIndicesCount)\r\n        var positionBuffer = new Float32Array(particleCount * prefabVerticiesCount * 3);\r\n\r\n        // https://www.soft8soft.com/docs/manual/en/programmers_guide/How-to-update-things.html\r\n\r\n        // prefabBufferGeometry.setIndex(new THREE.BufferAttribute(indexBuffer,1));\r\n        // var positionBuffer = prefabBufferGeometry.getAttribute(\"position\");\r\n\r\n        // use the prefab geometry to create instances and UVs specific \r\n        // to the UX indices\r\n\r\n        var dx = 0;\r\n        var dy = 0; \r\n\r\n        for(var i = 0, dx = 0, offset = 0; i < particleCount; i++) {\r\n\r\n            // loop through each prefab count element \r\n            for(var j  = 0; j < prefabVerticiesCount; j++, offset += 3) {\r\n                // loop through the prefab geometry \r\n                var prefabVertex = prefabGeometry.vertices[j];\r\n\r\n                // loop through positionBuffer \r\n                positionBuffer[offset    ] = prefabVertex.x;\r\n                positionBuffer[offset + 1] = prefabVertex.y;\r\n                positionBuffer[offset + 2] = prefabVertex.z;\r\n            }\r\n\r\n            for(var k = 0; k < prefabIndicesCount; k++){\r\n                indexBuffer[i * prefabIndicesCount + k] = prefabIndices[k] + i * prefabVerticiesCount;\r\n            }\r\n\r\n        }\r\n        \r\n        prefabBufferGeometry.setIndex(new THREE.BufferAttribute(indexBuffer,1))\r\n        prefabBufferGeometry.setAttribute(\"position\", new THREE.BufferAttribute(positionBuffer,3))\r\n        prefabBufferGeometry.getAttribute(\"position\").name = \"position\";\r\n\r\n        // console.log(positionBuffer);\r\n        // console.log(indexBuffer)\r\n\r\n        prefabBufferGeometry.setAttribute('normal', new THREE.BufferAttribute(new Float32Array(positionBuffer.length),3));\r\n        var normals = prefabBufferGeometry.getAttribute('normal');\r\n\r\n        var vA, vB, vC;\r\n\r\n        var p1 = new THREE.Vector3();\r\n        var p2 = new THREE.Vector3();\r\n        var p3 = new THREE.Vector3(); \r\n\r\n        var cA = new THREE.Vector3();\r\n        var cB = new THREE.Vector3();\r\n        \r\n        var indices = indexBuffer.array; \r\n\r\n        // console.log(indexBuffer + \" index buffer\")\r\n        // 6 \r\n        for(var i = 0; i < prefabIndicesCount; i += 3) {\r\n\r\n            // https://en.wikipedia.org/wiki/Vertex_normal\r\n            vA = indexBuffer[i] * 3;\r\n            vB = indexBuffer[i + 1] * 3;\r\n            vC = indexBuffer[i + 2] * 3\r\n            // offset amount\r\n\r\n            // https://threejs.org/docs/#api/en/math/Vector3.fromArray\r\n            p1.fromArray(positionBuffer, vA); // retrieve the vector, via this offset value from the array \r\n            p2.fromArray(positionBuffer, vB);\r\n            p3.fromArray(positionBuffer, vC); \r\n\r\n            cB.subVectors(p3, p2);\r\n            cA.subVectors(p1, p2);\r\n            cB.cross(cA) // we get the value of cb as cross product \r\n\r\n            normals.array[vA] += cB.x;\r\n            normals.array[vA + 1] += cB.y;\r\n            normals.array[vA + 2] += cB.z;\r\n\r\n            normals.array[vB] += cB.x;\r\n            normals.array[vB + 1] += cB.y;\r\n            normals.array[vB + 2] += cB.z;\r\n\r\n            normals.array[vC] += cB.x;\r\n            normals.array[vC + 1] += cB.y;\r\n            normals.array[vC + 2] += cB.z;\r\n\r\n\r\n        }\r\n\r\n        for(var i = 0; i < particleCount; i++) {\r\n            for(var j =0; j < prefabVerticiesCount; j++) {\r\n                normals[i*prefabIndicesCount + k ] = normals[k];\r\n            }\r\n        }\r\n\r\n        normals.needUpdate = true; \r\n\r\n    })\r\n\r\n\r\n    const initializeParticles = (() => {\r\n            console.log(\"particles enabled bool: \" + enabled)\r\n            mParticleSystem = useRef();\r\n            \r\n            prefabBufferGeometry = new THREE.BufferGeometry(); \r\n            generatePositionAndIndexBuffers(); // why i messed up \r\n            fillBufferData();\r\n\r\n     })\r\n\r\n        \r\n    initializeParticles();\r\n    \r\n\r\n        useEffect(() => {\r\n            tick();\r\n        }, [enabled])\r\n\r\n\r\n    const tick = (() => {\r\n        update();\r\n        // render();\r\n\r\n        mTime += mTimeStep;\r\n        mTime %= mDuration;\r\n\r\n        requestAnimationFrame(tick)\r\n    })\r\n\r\n\r\n    const update = (() => {\r\n        // mControls.update();\r\n       //console.log(mParticleSystem.current.material);\r\n       mParticleSystem.current.material.uniforms['uTime'].value = mTime;\r\n\r\n    })\r\n\r\n    // https://www.robinwieruch.de/conditional-rendering-react\r\n\r\n        return(\r\n            <group>\r\n                <pointLight position={[0, 400, 0]} intensity={4} distance={1000} decay={2} color={\"white\"}/>\r\n                <pointLight position={[0, -400, 0]} intensity={4} distance={1000} decay={2} color={\"white\"}/>\r\n                <pointLight position={[0, 0, 400]} intensity={4} distance={1000} decay={2} color={\"white\"}/>\r\n                <pointLight position={[0, 0, -400]} intensity={4} distance={1000} decay={2} color={\"white\"}/> \r\n                <mesh ref={mParticleSystem} args={[prefabBufferGeometry, particleMaterial]}>\r\n            </mesh></group>\r\n        )\r\n}\r\n\r\n\r\n\r\n","import BaseAnimationMaterial from \"./baseMaterial/BaseAnimationMaterial.js\";\r\nimport * as THREE from \"three\";\r\n\r\nvar ShaderChunk = {};\r\n\r\nShaderChunk['quat_from_axis_angle'] = \"vec4 quatFromAxisAngle(vec3 axis, float angle) \\n {\\n float halfAngle = angle * 0.5; \\n return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\\n}\\n\";\r\n\r\nShaderChunk['rotate_vector'] = \"vec3 rotateVector(vec4 q, vec3 v) \\n { \\n return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v); \\n} \\n\";\r\n\r\nShaderChunk['ease_in_ease_out_sin'] = \"float easeInOutSin(float t) \\n{ \\n return (1.0 + sin(3.141618 * t - 3.141618/ 2.0)) / 2.0; \\n} \\n\";\r\n\r\nclass RainParticleMaterial extends BaseAnimationMaterial{\r\n    constructor(params, uniformValues) {\r\n        super(params);\r\n\r\n        var shadowShader = THREE.ShaderLib['shadow'];\r\n        this.vertexColors = THREE.VertexColors;\r\n        this.lights = true; \r\n        this.side = THREE.DoubleSide;\r\n        this.uniforms = THREE.UniformsUtils.merge([shadowShader.uniforms, this.uniforms])\r\n        var testShader = `\r\n                uniform vec4 color;\r\n\r\n                void main() { \r\n\r\n                gl_FragColor = color;   // red\r\n            \r\n                }\r\n            `\r\n\r\n        this.vertexShader = this._concatVertexShader();\r\n        this.fragmentShader = shadowShader.fragmentShader;\r\n\r\n        this.setUniformValues(uniformValues)\r\n    }\r\n\r\n}\r\n\r\nRainParticleMaterial.prototype._concatMainVertexFunctions = function() {\r\n    return this.mainVertexFunctions.join('\\n');\r\n}\r\n\r\nRainParticleMaterial.prototype._concatVertexShader = function() {\r\n    return [\r\n        //\"#DEFINE PI =  3.1415926535897932384626433832795\",\r\n\r\n        \r\n        this._concatParameters(),\r\n\r\n        this._concatFunctions(),\r\n\r\n        \"void main() {\",\r\n\r\n        this._concatVertexInit(),\r\n\r\n        this._concatMainVertexFunctions(),\r\n\r\n        \"}\"\r\n    ].join(\"\\n\");\r\n}\r\n\r\n// the rain particle material\r\n\r\nconst RainMat = new RainParticleMaterial({\r\n    uniforms: {\r\n        uPosition: {type: 'v3', value: [0,0,0]},\r\n        uDuration: {type: 'f', value: 0.5},\r\n        uProgress: {type: 'f', value: 0},\r\n        color: {type: 'v3', value: [1,0,0]},\r\n        opacity: {type: 'f', value: 0}\r\n      },\r\n    \r\n    emissive: \"#212121\",\r\n    flatShading: false,\r\n    roughness: 0.1,\r\n\r\n    shaderFunctions: [\r\n        ShaderChunk['quat_from_axis_angle'],\r\n        ShaderChunk[\"rotate_vector\"],\r\n        ShaderChunk[\"ease_in_ease_out_sin\"],\r\n    ],\r\n\r\n    shaderVertexInit: [\r\n        'float tProgress = easeInOutSin(min(1.0, max(0.0, (uProgress - aOffset)) / uDuration));',\r\n        'vec3 newPosition = mix(aPositionStart, aPositionEnd, tProgress);',\r\n\r\n        'vec4 quatX = quatFromAxisAngle(vec3(1.0, 0.0, 0.0), 3.141618/2.0);',\r\n        'vec3 basePosition = rotateVector(quatX, position);'\r\n\r\n    ],\r\n    \r\n    shaderParameters: [\r\n        'attribute vec3 aPositionStart;',\r\n        'attribute vec3 aPositionEnd;',\r\n        'attribute float aOffset;',\r\n        'uniform vec3 uPosition;',\r\n        'uniform float uDuration;',\r\n        'uniform float uProgress;',\r\n    ],\r\n\r\n    mainVertexFunctions: [\r\n        'float scale = tProgress * 2.0 - 1.0;',\r\n        'scale = 1.0 - scale * scale;', \r\n        'basePosition *= scale;',\r\n        'basePosition *= min(1.0, max(0.0, -10.0 + distance(vec3(uPosition.x, uPosition.y, newPosition.z), newPosition)));',\r\n        'vec3 finalPos = newPosition + basePosition;',\r\n        'gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(finalPos, 1.0);'\r\n    ]\r\n\r\n}, {\r\n\r\n    // specular: 0xfff000,\r\n    // shininess: 50\r\n})\r\n\r\n// console.log(RainMat.fragmentShader);\r\n// console.log(THREE.ShaderChunk['common'])\r\n// console.log(THREE.ShaderChunk['packing'])\r\n// console.log(THREE.ShaderChunk['bsdfs']);\r\n// console.log(THREE.ShaderChunk['shadowmap_pars_fragment'])\r\n// console.log(THREE.ShaderChunk['shadowmask_pars_fragment'])\r\n// console.log(THREE.ShaderLib['shadow'].fragmentShader);\r\n// console.log(THREE.ShaderChunk['tonemapping_fragment'])\r\n// console.log(THREE.ShaderChunk['encodings_fragment'])\r\n// console.log(THREE.ShaderChunk['fog_fragment'])\r\n\r\n\r\n\r\n// const vertexShader =  `\r\n//     attribute vec3 aPositionStart;\r\n//     attribute vec3 aPositionEnd;\r\n//     attribute float aOffset;\r\n    \r\n//     uniform vec3 uPosition;\r\n//     uniform float uProgress;\r\n\r\n//     vec4 quatFromAxisAngle(vec3 axis, float angle) {\r\n//     float halfAngle = angle * 0.5;\r\n//     return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\r\n//     }\r\n\r\n//     vec3 rotateVector(vec4 q, vec3 v) {\r\n//     return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n//     }\r\n\r\n//     float easeInOutSin(float t){\r\n//     return (1.0 + sin(${Math.PI} * t - ${Math.PI} / 2.0)) / 2.0;\r\n//     }\r\n\r\n//     void main(){\r\n//     float tProgress = easeInOutSin(min(1.0, max(0.0, (uProgress - aOffset)) / ${duration}));\r\n//     vec3 newPosition = mix(aPositionStart, aPositionEnd, tProgress);\r\n\r\n//     vec4 quatX = quatFromAxisAngle(vec3(1.0, 0.0, 0.0), ${Math.PI / 2});\r\n//     vec3 basePosition = rotateVector(quatX, position);\r\n\r\n//     float scale = tProgress * 2.0 - 1.0;\r\n//     scale = 1.0 - scale * scale; \r\n//     basePosition *= scale;\r\n//     basePosition *= min(1.0, max(0.0, -10.0 + distance(vec3(uPosition.x, uPosition.y, newPosition.z), newPosition)));\r\n//     gl_Position = newPosition + basePosition;\r\n//     }\r\n// `;\r\n\r\n// scale as function of time progress, based on lerp function, using sin function, with the uProgress as the ratio, and offset (to give it that sense of irregularlity)\r\n// the larger the time, the larger the scale?\r\n// but we invert the scale, so scale is constantly decreasing \r\n// the position \r\n\r\nexport default RainMat;","import * as THREE from \"three\";\r\nimport particleMaterial from \"./ParticleMaterial\";\r\n\r\nvar ShaderChunk = {};\r\n\r\nShaderChunk['quat_from_axis_angle'] = \"vec4 quatFromAxisAngle(vec3 axis, float angle) \\n {\\n float halfAngle = angle * 0.5; \\n return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\\n}\\n\";\r\n\r\nShaderChunk['rotate_vector'] = \"vec3 rotateVector(vec4 q, vec3 v) \\n { \\n return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v); \\n} \\n\";\r\n\r\nShaderChunk['ease_in_ease_out_sin'] = \"float easeInOutSin(float t) \\n{ \\n return (1.0 + sin(3.141618 * t - 3.141618/ 2.0)) / 2.0; \\n} \\n\";\r\n\r\nconst vertex = `\r\n    attribute vec3 aPositionStart;\r\n    attribute vec3 aPositionEnd;\r\n    attribute float aOffset;\r\n    \r\n    uniform vec3 uPosition;\r\n    uniform float uProgress;\r\n    uniform float mDuration;\r\n\r\n    vec4 quatFromAxisAngle(vec3 axis, float angle) {\r\n      float halfAngle = angle * 0.5;\r\n      return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\r\n    }\r\n\r\n    vec3 rotateVector(vec4 q, vec3 v) {\r\n      return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n    }\r\n\r\n    float easeInOutSin(float t){\r\n      return (1.0 + sin(3.1416 * t - 3.1416 / 2.0)) / 2.0;\r\n    }\r\n\r\n    void main(){\r\n      float tProgress = easeInOutSin(min(1.0, max(0.0, (uProgress - aOffset))/mDuration));\r\n      vec3 newPosition = mix(aPositionStart, aPositionEnd, tProgress);\r\n\r\n      vec4 quatX = quatFromAxisAngle(vec3(1.0, 0.0, 0.0), 3.1416 / 2.0);\r\n      vec3 basePosition = rotateVector(quatX, position);\r\n  \r\n      float scale = tProgress * 2.0 - 1.0;\r\n      scale = 1.0 - scale * scale;\r\n      basePosition *= scale;\r\n      basePosition *= min(1.0, max(0.0, -10.0 + distance(vec3(uPosition.x, uPosition.y, newPosition.z), newPosition)));\r\n      gl_Position = newPosition + basePosition;\r\n    }\r\n  `;\r\n\r\nclass RainParticleMaterialTwo extends THREE.MeshStandardMaterial {\r\n    constructor(params, uniformValues) {\r\n        super(params);\r\n\r\n        this.uniforms = params.uniforms; \r\n\r\n        this.vertexShader = params.vertexShader;\r\n        this.fragmentShader = null;\r\n        this.replacedShader = null; \r\n        // this.onBeforeCompile(s); // compilethe \r\n\r\n    }\r\n\r\n    // https://codepen.io/prisoner849/pen/BvxBPW\r\n\r\n    // why this is built in /// modify built in material's shaders before compilation\r\n    // https://github.com/mrdoob/three.js/issues/11475\r\n\r\n\r\n\r\n    // for this to work, \r\n    // you have to know which shaders to replace \r\n    onBeforeCompile(shader){\r\n\r\n        Object.assign(shader.uniforms, this.uniforms);\r\n\r\n        // retrieve the shader from existing vertex shader \r\n        const vertexShader = this.vertexShader.replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n        // console.log('vertex shader :' + vertexShader)\r\n        \r\n        // matching regex https://www.w3schools.com/jsref/jsref_obj_regexp.asp\r\n        // get the attribtues\r\n        const attributes = vertexShader.match(/.+?(?=void)/)[0];\r\n\r\n        // console.log('attributes ' + attributes)\r\n\r\n        // get the main function from the vertex function \r\n        const main = vertexShader.match(/main\\(\\){(.*?)}/)[1];\r\n        // console.log('main '+ main);\r\n\r\n        shader.vertexShader = `${attributes} \\n ${shader.vertexShader}`;\r\n\r\n        // add the main function \r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            '#include <begin_vertex>',\r\n            main.replace('gl_Position =', 'vec3 transformed =')\r\n          );\r\n\r\n        console.log(shader.fragmentShader);\r\n    }\r\n\r\n}\r\n\r\nvar RainMat2 = new RainParticleMaterialTwo({\r\n    color: \"#4EEE94\",\r\n    // color: \"#27408B\",\r\n    emissive: \"#212121\",\r\n    flatShading: true,\r\n    roughness: 0.1,\r\n    metalness: 0.7,\r\n\r\n    uniforms: {\r\n        uPosition: {type: 'v3', value: [0,0,0]},\r\n        mDuration: {type: 'f', value: 100},\r\n        uProgress: {type: 'f', value: 0},\r\n      },\r\n\r\n    vertexShader: vertex\r\n\r\n})\r\n  \r\n\r\nexport default RainMat2; ","import * as THREE from 'three';\r\nimport React, {useRef,useEffect, useFrame} from 'react'\r\n// import {useFrame} from 'react-three-fiber'\r\nimport RainMat from \"../shaders/RainParticleMaterial.js\";\r\nimport RainMat2 from \"../shaders/RainParticleMaterialTwo.js\";\r\n\r\nexport default function RainParticles({enabled}) {\r\n\r\n    var mParticleSystem;\r\n    var prefabGeometry;\r\n    var prefabBufferGeometry;\r\n    var mSphere; \r\n    \r\n    var startYheight = 50;\r\n    var endYheight = -50;\r\n\r\n    var multiplier; \r\n\r\n    var particleCount; \r\n    var mTime = 0;\r\n    var mDuration = 100; \r\n    var mTimeStep = 1/20;\r\n    var S = 100; // particleDimension \r\n    var progress = 0;\r\n\r\n    var pLight; \r\n\r\n    var rainParticleMaterial; \r\n\r\n    const setupPositionAndIndexBuffer = (() => {\r\n        const indexes = prefabGeometry.faces.length * 3; \r\n        const indexBuffer = new Uint32Array(multiplier * indexes);\r\n        const vertexCount = prefabGeometry.vertices.length;\r\n        const vertices = prefabGeometry.vertices;\r\n\r\n        const bufferIndexes = [];\r\n        for (let i = 0; i < prefabGeometry.faces.length; i += 1) {\r\n          bufferIndexes.push(prefabGeometry.faces[i].a, prefabGeometry.faces[i].b, prefabGeometry.faces[i].c);\r\n        }\r\n\r\n        // Loop over the multiplier\r\n        for (let i = 0; i < multiplier; i += 1) {\r\n          // Loop over the indexes of the baseGeometry\r\n          for (let j = 0; j < indexes; j += 1) {\r\n            // Repeat over the indexes and add them to the buffer\r\n            indexBuffer[i * indexes + j] = bufferIndexes[j] + i * vertexCount;\r\n          }\r\n        }\r\n    \r\n        // Set the index with the data\r\n        prefabBufferGeometry.setIndex(new THREE.BufferAttribute(indexBuffer, 1));\r\n    \r\n        // Create a new attribute to store data in\r\n        const attributeData = new Float32Array(multiplier * vertexCount * 3);\r\n    \r\n        // Value to hold position used in the loop for the array positions\r\n        let offset = 0;\r\n        // Loop over the multiplier\r\n        for (let i = 0; i < multiplier; i += 1) {\r\n          // Loop over the vertexCount of the baseGeometry\r\n          for (let j = 0; j < vertexCount; j += 1, offset += 3) {\r\n            // Repeat over the vertices and add them to the buffer\r\n            const vertex = vertices[j];\r\n            attributeData[offset] = vertex.x;\r\n            attributeData[offset + 1] = vertex.y;\r\n            attributeData[offset + 2] = vertex.z;\r\n          }\r\n        }\r\n    \r\n        const posAttribute = new THREE.BufferAttribute(attributeData, 3);\r\n        prefabBufferGeometry.setAttribute('position', posAttribute);\r\n        // this.addAttribute('position', attribute);\r\n    })\r\n\r\n    // https://codepen.io/cvaneenige/pen/zegVmG\r\n    const setupShaderProperties = (() => {\r\n\r\n        var xzcoords = []\r\n\r\n        for (let x = -S; x < S; x += 1) {\r\n            for (let z = -S; z < S; z += 1) {\r\n              xzcoords.push(x / (S / 200) + 2, z / (S / 200) + 2);\r\n              // this meanss between -S and S, the xz coordinates will \r\n\r\n              // x/4 + 1 , z/4 + 1 // iterate every z/4 + 1 (offset). // -19 .... 1, 5/4, 6/4, 7/4, 2, 9/4, 10/4, 11/4, 3 ... -19 (difference of 1/4) //    \r\n            }\r\n          }\r\n\r\n          multiplier = xzcoords.length / 2;\r\n\r\n        // var particleCount = 4*S*S;  // this isn't right\r\n        // var particleCount = 4 *S; // because there are 2S x pts, 2S z pts;  \r\n        var prefabVerticiesLength = prefabGeometry.vertices.length; \r\n\r\n        // prefabBufferGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(particleCount * prefabVerticiesLength),3)); // keep for consistency\r\n        prefabBufferGeometry.setAttribute('aPositionStart', new THREE.BufferAttribute(new Float32Array(multiplier *3 * prefabVerticiesLength),3));\r\n        prefabBufferGeometry.setAttribute('aPositionEnd', new THREE.BufferAttribute(new Float32Array(multiplier *3 * prefabVerticiesLength),3));\r\n        // prefabBufferGeometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(multiplier *3 * prefabVerticiesLength),3));\r\n        prefabBufferGeometry.setAttribute(\"aOffset\", new THREE.BufferAttribute(new Float32Array(multiplier * prefabVerticiesLength),1));\r\n\r\n        // var posBuffer = prefabBufferGeometry.getAttribute('position');\r\n        var aStartPosBuffer = prefabBufferGeometry.getAttribute('aPositionStart');\r\n        var aEndPosBuffer = prefabBufferGeometry.getAttribute('aPositionEnd');\r\n        var aOffset = prefabBufferGeometry.getAttribute('aOffset');\r\n        // var aColor = prefabBufferGeometry.getAttribute('color');\r\n\r\n\r\n       \r\n\r\n          // this is the real count of the xc coords \r\n          // \r\n        \r\n        // study this \r\n        for(var i = 0, offset = 0; i < multiplier; i++){\r\n\r\n            //  apply for each verticies \r\n            for(var j = 0; j < prefabVerticiesLength; j++){\r\n                aStartPosBuffer.array[offset++] = xzcoords[i * 2]; \r\n                aStartPosBuffer.array[offset++] = startYheight;\r\n                aStartPosBuffer.array[offset++] = xzcoords[i * 2 + 1];\r\n            }\r\n        }\r\n\r\n\r\n        for(var i = 0, offset = 0; i < multiplier; i++){\r\n\r\n            //  apply for each verticies \r\n            for(var j = 0; j < prefabVerticiesLength; j++){\r\n                aEndPosBuffer.array[offset++] = xzcoords[i * 2]; \r\n                aEndPosBuffer.array[offset++] = endYheight;\r\n                aEndPosBuffer.array[offset++] = xzcoords[i * 2 + 1];\r\n            }\r\n        }\r\n\r\n        var total = multiplier;\r\n        for(var i = 0, offset = 0; i < multiplier; i++){\r\n           var delay = Math.random() * (total * ((1 - mDuration) / (multiplier - 1)));\r\n           for(var j = 0; j < prefabVerticiesLength; j++) {\r\n               aOffset.array[offset++] = delay; // offset each time you skip a vertices\r\n           }\r\n        }\r\n        // length of particle count \r\n        // 2S * 2 = 4S ; \r\n        // const uniforms = {\r\n        //     uProgress: {\r\n        //       value: 0\r\n        //     },\r\n        //     uPosition: {\r\n        //       value: [0, 0, 0]\r\n        //     }\r\n        //   };\r\n        // var color = new THREE.Color();\r\n        // var h,s,l;\r\n\r\n        // for(var i = 0, offset = 0; i < multiplier; i++) {\r\n        //     // h = i/particleCount * 50;\r\n        //     // // s = THREE.MathUtils.randFloatSpread(0.59, 0.61);\r\n        //     // l = THREE.MathUtils.randFloatSpread(0.7, 0.9);\r\n        //     //  s = 0.8;\r\n        //     // l = 0.5;\r\n        //     h = 0.7;\r\n        //     l = 0.6;\r\n        //     s = 0.8;\r\n\r\n        //     color.setHSL(h,s,l);\r\n        //     // console.log(\"loop\")\r\n        //     for(var j = 0; j < prefabGeometry.vertices.length; j++) {\r\n        //         aColor.array[offset++] = 0.5;\r\n        //         aColor.array[offset++] = 0;\r\n        //         aColor.array[offset++] = 0; \r\n        //         // console.log('loop');\r\n        //     }\r\n\r\n        // } \r\n        \r\n    })\r\n\r\n    const initializeParticles = (() => {\r\n         console.log(\"rain particles enabled bool: \" + enabled)\r\n         \r\n          mParticleSystem = useRef();\r\n          pLight = useRef();\r\n          mSphere = useRef();\r\n        // particleDimension; // check \r\n        prefabGeometry =  new THREE.OctahedronGeometry(1,0) // dont use buffer geometries\r\n        // since we want verticies \r\n        prefabBufferGeometry = new THREE.BufferGeometry(); \r\n        setupShaderProperties(); // why i messed up \r\n        setupPositionAndIndexBuffer();\r\n\r\n        // console.log(prefabBufferGeometry);\r\n\r\n    })\r\n\r\n    initializeParticles();\r\n    console.log('test');\r\n\r\n      useEffect(() =>{\r\n          tick();\r\n      }, [enabled])\r\n\r\n    const tick = (() => {\r\n        update();\r\n        // render();\r\n\r\n        mTime += mTimeStep;\r\n        mTime %= mDuration;\r\n\r\n        requestAnimationFrame(tick)\r\n    })\r\n\r\n    const update = (() => {\r\n        // mControls.update();\r\n       // mParticleSystem.current.material.uniforms['uTime'].value = mTime;\r\n      //  console.log(\"rain particles enabled bool: \" + enabled)\r\n          mParticleSystem.current.material.uniforms['uProgress'].value = mTime; \r\n          let p = mParticleSystem.current.material.uniforms['uProgress'].value * 2 - 1;\r\n          p = 1 - p * p; \r\n          const newColor = new THREE.Color().setHSL(0.75 + p * 0.25, 0.7, 0.4);\r\n          // console.log(newColor);\r\n          let color = [newColor.r, newColor.g, newColor.b]\r\n          pLight.current.color = newColor;\r\n          mSphere.current.material.emissive = newColor; \r\n          // mParticleSystem.current.material.uniforms['color'].value = color; \r\n    })\r\n\r\n\r\n\r\n    // initialize values \r\n    // mParticleSystem.current.material.uniforms['uProgress'] = \r\n      return (\r\n          <group>\r\n          <mesh ref={mSphere} geometry={new THREE.IcosahedronGeometry(1, 2)} material={new THREE.MeshStandardMaterial({\r\n              flatShading: false,\r\n              roughness: 0.1,\r\n              metalness: 0.7\r\n          })} position={[0,0,0]}/>\r\n          <mesh geometry={new THREE.BoxGeometry(440, 440, 440)} material={new THREE.MeshPhongMaterial({color: \"black\", emissive: \"black\", side: THREE.BackSide })}/>\r\n          <mesh ref={mParticleSystem} args={[prefabBufferGeometry, RainMat2]} castShadow={true}>\r\n          </mesh>\r\n\r\n          <ambientLight color={\"white\"} distance={0.1}/>\r\n\r\n          <spotLight position={[0,30,0]} intensity={0.1} distance={5} decay={Math.PI/2} />\r\n          <spotLight position={[0,-30,0]} intensity={0.1} distance={5} decay={Math.PI/2} />\r\n\r\n          <pointLight ref={pLight} color={\"#EFEFEF\"} position={[0,0,0]} intensity={20} distance={20} decay={Math.PI/2} />\r\n          \r\n          <pointLight  color={\"#EFEFEF\"} position={[30,0,0]} intensity={100} distance={20} decay={Math.PI/2} />\r\n          <pointLight color={\"#EFEFEF\"} position={[-30,0,0]} intensity={100} distance={20} decay={Math.PI/2} />\r\n          <pointLight  color={\"#EFEFEF\"} position={[0,0,40]} intensity={200} distance={40} decay={Math.PI/2} />\r\n          <pointLight  color={\"#EFEFEF\"} position={[0,0,-40]} intensity={200} distance={40} decay={Math.PI/2} />\r\n\r\n\r\n          {/* <pointLight ref={pLight} color={\"#EFEFEF\"} position={[10,0,10]} intensity={100} distance={20} decay={Math.PI/2} />\r\n          <pointLight ref={pLight} color={\"#EFEFEF\"} position={[-10,0,-10]} intensity={100} distance={20} decay={Math.PI/2} />\r\n          <pointLight ref={pLight} color={\"#EFEFEF\"} position={[-10,0,10]} intensity={100} distance={20} decay={Math.PI/2} />\r\n          <pointLight ref={pLight} color={\"#EFEFEF\"} position={[10,0,-10]} intensity={100} distance={20} decay={Math.PI/2} /> */}\r\n\r\n\r\n\r\n\r\n          </group>\r\n      )\r\n\r\n}","export default class TouchPointScene{\r\n    constructor(index, previousPath, nextPath) {\r\n        this.index = index;\r\n        this.previousPath = previousPath;\r\n        this.nextPath = nextPath; \r\n\r\n        this.previousTouchPoint; \r\n        this.nextTouchPoint; \r\n    }\r\n\r\n    setPreviousTouchPoint(prevTouchPoint) {\r\n        this.previousTouchPoint = prevTouchPoint;\r\n    }\r\n\r\n    setNextTouchPoint(nextTouchPoint) {\r\n        this.nextTouchPoint = nextTouchPoint;\r\n    }\r\n}\r\n","import * as THREE from 'three'\r\nimport {addEffect} from 'react-three-fiber';\r\nimport create from 'zustand';\r\nimport TouchPointScene from \"./TouchPointScene.js\"\r\n\r\n// https://github.com/pmndrs/zustand\r\n// https://github.com/pmndrs/zustand#transient-updates-for-often-occuring-state-changes\r\n\r\n// https://engineering.icf.com/getting-started-with-a-3d-react-workflow/\r\n// use the state system above\r\n\r\n\r\nconst [useStore] = create((set,get) => {\r\n\r\n\r\n    return {\r\n\r\n        camera: null, \r\n        timeStepRate: 0.005,\r\n        cameraPaths: null,\r\n\r\n        data: {\r\n            t: 0,\r\n            position: [0,0,0],\r\n            rotation: new THREE.Quaternion(),\r\n            normal: new THREE.Vector3(),\r\n            binormal: new THREE.Vector3(),\r\n            scale: 1, \r\n            fov: 120,\r\n\r\n            // https://threejs.org/docs/#api/en/geometries/TubeBufferGeometry\r\n            \r\n            currentTrack: null, \r\n            currentPath: new THREE.CubicBezierCurve3(),\r\n            currentTouchPoint: new TouchPointScene(),\r\n            nextTouchPoint: new TouchPointScene(),\r\n            destinationPos: new THREE.Vector3(),\r\n            direction: null,\r\n\r\n            currentLocationIndex: 0,\r\n\r\n            isMoving: false, \r\n\r\n            forwardObjPos: [0,0,0],\r\n            backObjPos: [0,0,0],        \r\n            \r\n            isCameraMoving: false, \r\n\r\n        },\r\n\r\n        // state with actions\r\n        actions: {\r\n            init(camera, cameraPaths, startTouchPoint) {\r\n                console.log(\"initalize actions\")\r\n                console.log(camera);\r\n                set({camera, cameraPaths})\r\n\r\n                const {data} = get();\r\n\r\n                data.forwardObjPos = [camera.position.x, camera.position.y - 10, camera.position.z + 10];\r\n                data.backwardObjPos = [camera.position.x, camera.position.y - 10, camera.position.z - 10]; \r\n\r\n                data.currentTouchPoint = startTouchPoint;\r\n\r\n                console.log(data.currentTouchPoint)\r\n            },\r\n\r\n            initTwo(camera, cameraPaths) {\r\n                set({camera, cameraPaths})\r\n                const {data} = get();\r\n\r\n                data.currentPath = cameraPaths[0].nextPath.curve; \r\n\r\n            },\r\n\r\n            // call via onClick event handler \r\n            startMove(direction) {\r\n\r\n                const {data,actions, isCameraMoving} = get();\r\n                data.direction = direction; \r\n\r\n                if(data.direction == \"back\") {\r\n                    data.currentPath = data.currentTouchPoint.previousPath.curve;\r\n                    data.nextTouchPoint = data.currentTouchPoint.previousTouchPoint;\r\n                    data.destinationPos = data.currentPath.v0;\r\n                    data.currentTrack = data.currentTouchPoint.previousPath.tubeBufferGeometryPath;\r\n                    // console.log(data.currentPath);\r\n                }\r\n                else if (data.direction == \"forwards\") {\r\n                    data.currentPath = data.currentTouchPoint.nextPath.curve;\r\n                    data.nextTouchPoint = data.currentTouchPoint.nextTouchPoint; \r\n                    data.destinationPos = data.currentPath.v3;\r\n                    data.currentTrack = data.currentTouchPoint.nextPath.tubeBufferGeometryPath;\r\n                    // console.log(data.currentPath);\r\n                    // console.log(data.destinationPos);\r\n\r\n                }\r\n\r\n                data.isCameraMoving = true; \r\n\r\n               //  actions.move();\r\n\r\n            },\r\n\r\n            testMove(direction) {\r\n                console.log(\"testing! \" + direction);\r\n            },\r\n\r\n            testMoveTwo(direction) {\r\n                console.log(\"testing! \" + direction);\r\n\r\n                var t = 0; \r\n\r\n                // use addeffect // \r\n                // https://developer.aliyun.com/mirror/npm/package/react-three-fiber-cambrian\r\n                addEffect(() => {\r\n\r\n                    if(t != 50000) {\r\n                        t += 100;\r\n                        console.log(\"time at : \" + t );\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n\r\n\r\n                })\r\n\r\n                if(data.direction == \"back\") {\r\n                    data.timeStepRate *= -1;\r\n                }\r\n                console.log(\"we're done\")\r\n            },\r\n\r\n            // call inside \r\n            move() {\r\n\r\n                const {data, actions, camera, timeStepRate} = get()                    \r\n\r\n                if(data.t < 0.95) {\r\n                        // set up interpolation for this \r\n                         // use a different lerping function to loop this path \r\n                        // https://threejs.org/docs/#api/en/extras/core/Curve\r\n                        console.log(data.t);\r\n                        \r\n                        data.position = data.currentPath.getPointAt(data.t);\r\n                        // data.position.addVector(data.position, new THREE.Vector3(0,25,0));\r\n                        // interpolate quanterion \r\n                        data.rotation; \r\n                        data.t += timeStepRate;\r\n                        // point = data.currentPath.getPoint(data.t);\r\n                        // console.log(point);\r\n                    \r\n                }\r\n                else {\r\n                    data.t = 0;\r\n                    data.isCameraMoving = false; \r\n                    actions.stopMoveTest();\r\n                }\r\n            },\r\n\r\n            moveInterpolation(t) {\r\n                const {data} = get();\r\n                data.t = t; \r\n                data.position = data.currentPath.getPointAt(data.t);\r\n                console.log(data.position);\r\n            },\r\n\r\n            stopMoveTest() {\r\n                console.log('stopped move');\r\n            },\r\n\r\n            stopMove() {\r\n\r\n                const { data, actions,camera } = get()\r\n\r\n                if(data.direction == \"back\") {\r\n                    data.currentLocationIndex = data.currentLocationIndex+1;\r\n                }\r\n                else if (data.direction == \"forward\") {\r\n                   data.currentLocationIndex = data.currentLocationIndex-1;\r\n                } \r\n\r\n                    data.forwardObjPos = [camera.position.x, camera.position.y - 10, camera.position.z + 10];\r\n                    data.backwardObjPos = [camera.position.x, camera.position.y - 10, camera.position.z - 10]; \r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport default useStore;","import * as THREE from 'three';\r\n\r\nexport default class TouchPointPath{\r\n    constructor(curve) {\r\n        this.curve = curve;\r\n        this.tubeBufferGeometryPath = new THREE.TubeBufferGeometry(curve, 250, 0.2, 10, true);\r\n        this.bufferGeometryActive = false; // these toggles help us determine state changes\r\n    }\r\n\r\n}\r\n\r\nTouchPointPath.constructor = TouchPointPath;","import { useCallback, useEffect } from 'react'\r\nimport { useSpring, config} from '@react-spring/core'\r\nimport { useGesture } from 'react-use-gesture'\r\n\r\n// source https://codesandbox.io/embed/r3f-train-l900i\r\n// \r\n\r\nfunction clamp(val, min, max) {\r\n  return val > max ? max : val < min ? min : val;\r\n}\r\n\r\nexport default function useYScroll(bounds, props) {\r\n\r\n   // https://www.react-spring.io/docs/hooks/use-spring\r\n   // \"Or: pass a function that returns values, and update using \"set\"\r\n   // see line 1133, /node_modules/react-spring/web.js\r\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: config.slow }))\r\n\r\n  // console.log(y.get());\r\n  // property, and method to set \r\n  \r\n  // adding a callback function to refrence \r\n  // when onwheel or ondrag is called \r\n\r\n  // \r\n\r\n  const fn = useCallback(\r\n    ({ xy: [, cy], previous: [, py], memo = y.get() }) => {\r\n      const newY = clamp(memo + cy - py, ...bounds)\r\n      set({ y: newY }) // set spring to newY\r\n      // console.log(newY);\r\n      return newY\r\n    },\r\n    [bounds, y, set]\r\n  )\r\n\r\n  // https://www.npmjs.com/package/react-use-gesture\r\n  // \r\n   \r\n  const bind = useGesture({ onWheel: fn, onDrag: fn }, props)\r\n  useEffect(() => props && props.domTarget && bind(), [props, bind])\r\n  return [y, bind]\r\n}\r\n","/// cameraPathfinding reference\r\n// https://threejs.org/examples/#webgl_geometry_extrude_splines\r\n\r\nimport * as THREE from 'three'; \r\nimport {useLoader, useThree, useFrame} from 'react-three-fiber';\r\nimport {useEffect} from 'react'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport useStore from \"./store.js\";\r\nimport TouchPointScene from './TouchPointScene';\r\nimport TouchPointPath from \"./touchPointPath\";\r\nimport useYScroll from \"./onScroll.js\";\r\nimport {a as aDom} from \"@react-spring/web\";\r\n\r\n// https://github.com/pmndrs/react-postprocessing\r\n\r\n// import event handler for moving \r\n\r\n// button shader \r\n// blender should be real set up for shader, lighting, etc. \r\n\r\n// set up blender tomorrow \r\n// have right trigger for animation, blendshapes, morphtargets\r\n// think about 3d models, vfx, (study\r\n\r\n// im feeling blender is the way to go\r\n// import blender, d3js, and \r\n// http://billdwhite.com/wordpress/2015/01/12/d3-in-3d-combining-d3-js-and-three-js/\r\n\r\nvar mouse = new THREE.Vector2();\r\n\r\n\r\nfunction BeizerPath({props}) {\r\n    var curves = props.curves; \r\n    var lines = [];\r\n    var tubeGeometries = [];\r\n    console.log(curves);\r\n    for(var i = 0; i < curves.length; i++){\r\n\r\n        //  https://threejs.org/docs/index.html#api/en/extras/curves/CubicBezierCurve3\r\n        // set up subdivision and scale, understanding points\r\n        const points = curves[i].curve.getPoints( 50 );\r\n\r\n        var bg = new THREE.BufferGeometry().setFromPoints(points);\r\n        const material = new THREE.LineBasicMaterial( { color : 'blue'} );\r\n\r\n        const curveObject = new THREE.Line( bg, material );\r\n        tubeGeometries.push(curves[i].tub)\r\n\r\n        lines.push(curveObject);\r\n\r\n    }\r\n\r\n    return (\r\n        lines.map(line => {\r\n            return (<primitive object={line}/>)\r\n        })\r\n    )\r\n}\r\n\r\n\r\nfunction onMouseMove( event ) {\r\n\r\n\t// calculate mouse position in normalized device coordinates\r\n    // (-1 to +1) for both components\r\n\r\n\tmouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n\tmouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n    // console.log('mouse x : '+ mouse.x + \" mouse y : \" + mouse.y)\r\n}\r\n\r\nexport default function CameraPath({props}){\r\n    // console.log(props);\r\n    // console.log(props.controlPoints)\r\n\r\n    var controlPoints = props.controlPoints;\r\n    var currentLocation = props.currentLocation; \r\n    var TouchPointScenes = []; // array of curves\r\n    // var buttonToClick = props.buttonToClick;\r\n    var Curves = [];\r\n    // console.log(controlPoints)\r\n    // var raycasterForCamera = useRef();\r\n\r\n    const actions = useStore(state => state.actions); // actions with methods to call\r\n    const data = useStore(state => state.data); \r\n    // at different states of the event \r\n    \r\n\r\n    const {\r\n        camera,\r\n        gl: {domElement},\r\n        raycaster\r\n      } = useThree()\r\n    \r\n    // const loader = new GLTFLoader();\r\n\r\n    const load1 = useLoader(GLTFLoader, \"./models/backward.gltf\");\r\n    // console.log(load1);\r\n    // var backobj; \r\n    var backobj = load1.nodes.Cube; // data type: obj  \r\n    \r\n    const load2 = useLoader(GLTFLoader, \"./models/forward.gltf\");\r\n    // console.log(load2);\r\n    var forwardobj = load2.nodes.Cube; // data type: obj \r\n\r\n    const lowerBound = -100;\r\n    const highBound = 2400; \r\n\r\n    const [y] = useYScroll([lowerBound, highBound], { domTarget: window })\r\n    // what if we use the scroll as a lerp ratio between camera pos 1 and camera pos 2\r\n\r\n    // we don't need the move function anymore\r\n    const interpolateY = ((y) => {\r\n        let t = y / (highBound - lowerBound);\r\n        return t; \r\n    })\r\n\r\n\r\n    // set up orbit controls but modify\r\n    // https://threejs.org/docs/index.html#examples/en/controls/OrbitControls\r\n   //  var controls = new OrbitControls(); // review this data structure \r\n\r\n    // set up a series of beizer paths based on a given array \r\n    var intializePaths = () => {\r\n        for(var i = 0; i < controlPoints.length; i+=4){\r\n            \r\n            var bezierCurve = new THREE.CubicBezierCurve3(controlPoints[i], controlPoints[i+1], controlPoints[i+2], controlPoints[i+3]);           \r\n            var touchPointPath = new TouchPointPath(bezierCurve);\r\n            Curves.push(touchPointPath);\r\n        }\r\n\r\n        let touchPointSceneLength = Curves.length + 1; \r\n\r\n        for(var i = 0; i < touchPointSceneLength; i+=2) {\r\n            console.log('run');\r\n            var t = new TouchPointScene(i, null, Curves[i]);\r\n            var t1 = new TouchPointScene(i+1, Curves[i], null);\r\n\r\n            TouchPointScenes.push(t);\r\n            TouchPointScenes.push(t1);\r\n\r\n            if(TouchPointScenes[i-1] != null ){\r\n                t.previousPath = Curves[i-1];\r\n                TouchPointScenes[i-1].nextPath = Curves[i-1];\r\n            }\r\n\r\n            t1.setPreviousTouchPoint(TouchPointScenes[i]);\r\n            t.setNextTouchPoint(TouchPointScenes[i+1]);\r\n            \r\n          }\r\n        console.log(TouchPointScenes)\r\n    }\r\n\r\n    intializePaths();    \r\n    console.log(TouchPointScenes);\r\n    console.log(Curves);\r\n\r\n    // actions.init(camera, TouchPointScenes, TouchPointScenes[0]);\r\n    actions.initTwo(camera,TouchPointScenes);\r\n\r\n    // https://spectrum.chat/react-three-fiber/general/raycasting-e-g-onclick-noob-tips~be3da813-7cd0-45b9-a30b-7f43163b3e92\r\n    var onCameraMove = (direction) => {\r\n\r\n        console.log('click!');\r\n        actions.startMove(direction);\r\n    }\r\n\r\n    window.addEventListener( 'mousemove', onMouseMove, false );\r\n\r\n    var checkRaycast = (() => {    \r\n        \r\n        raycaster.setFromCamera(mouse, camera);\r\n\r\n        const intersectOne = raycaster.intersectObject(backobj);\r\n        const intersectTwo = raycaster.intersectObject(forwardobj);\r\n\r\n        if (intersectTwo.length > 1) {\r\n            console.log(\"clicking on forward obj!\");\r\n            // console.log(intersectTwo);\r\n            actions.startMove(\"forwards\");\r\n\r\n        }\r\n          \r\n        requestAnimationFrame(checkRaycast);\r\n\r\n    })\r\n\r\n    // you can check and see if the camera is in moving state (i.e.)\r\n\r\n    let offset = 0        \r\n    \r\n    console.log(y);\r\n    \r\n\r\n    useFrame(() => {\r\n\r\n        var t = interpolateY(y.get());\r\n        actions.moveInterpolation(t);\r\n\r\n        camera.position.x = data.position.x;\r\n        camera.position.y = data.position.y + 25;\r\n        camera.position.z = data.position.z;\r\n\r\n\r\n    })\r\n\r\n    // frame loop https://github.com/pmndrs/react-three-fiber/issues/133\r\n\r\n\r\n    const cameraLookAtFunction = (() => {\r\n            // https://codesandbox.io/embed/r3f-game-i2160\r\n            // reference to camera rig component \r\n            const track = data.currentTrack;\r\n            const t = data.t; \r\n            const pos = data.position;    \r\n            \r\n            const segments = track.tangents.length\r\n            const pickt = t * segments // how many segments have we passed as a function of time \r\n            const pick = Math.floor(pickt) // each segment is like a cell \r\n            const pickNext = (pick + 1) % segments // next segment to go to \r\n\r\n            // console.log(\"binromals pick : \" + pick)\r\n            // console.log(track.binormals[pick]);\r\n            console.log(\"binromals picknext : \" + pickNext)\r\n            // console.log(track.binormals[pickNext]);\r\n\r\n\r\n\r\n            // store data regarding normals and binormals in data storage for class usage\r\n            data.binormal.subVectors(track.binormals[pickNext], track.binormals[pick])\r\n            data.binormal.multiplyScalar(pickt - pick).add(track.binormals[pick])\r\n\r\n            // get the direction and offset, and use that to \r\n            const dir = track.parameters.path.getTangentAt(t)\r\n            offset += (Math.max(15, 15 + -mouse.y / 20) - offset) * 0.05\r\n            data.normal.copy(data.binormal).cross(dir)\r\n\r\n            pos.add(data.normal.clone().multiplyScalar(offset))\r\n            console.log('camera positions');\r\n            console.log(pos);\r\n            \r\n            camera.position.copy(pos)\r\n            // console.log(camera.position);\r\n            const lookAt = track.parameters.path.getPointAt((t + 30 / track.parameters.path.getLength()) % 1).multiplyScalar(data.scale)\r\n            camera.matrix.lookAt(camera.position, lookAt, data.normal)\r\n            camera.quaternion.setFromRotationMatrix(camera.matrix)\r\n            // camera.fov += ((t > 0.4 && t < 0.45 ? 120 : data.fov) - camera.fov) * 0.05\r\n            camera.updateProjectionMatrix()\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        // https://codesandbox.io/embed/r3f-game-i2160\r\n        // https://github.com/pmndrs/zustand\\\r\n        // use the style here \r\n\r\n        <group>\r\n        \r\n        <BeizerPath props={{curves: Curves}}></BeizerPath>\r\n        {/* <primitive object={backobj} position={data.backObjPos} />\r\n        <primitive object={forwardobj} position={data.forwardObjPos}/> */}\r\n        </group>\r\n    ) \r\n}","import ReactDOM from 'react-dom'\r\nimport * as THREE from 'three'\r\nimport React, { useCallback, useEffect, useRef, useMemo , useState, Suspense} from 'react'\r\nimport Particles from \"./components/particles/particles.js\"\r\nimport { Canvas, useFrame, useThree, extend} from 'react-three-fiber'\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport RainParticles from \"./components/particles/rainParticles.js\";\r\nimport CameraPath from \"./components/cameraPathFinding/cameraPathFinding.js\";\r\nimport './styles.css';\r\nimport useYScroll from \"./components/cameraPathFinding/onScroll.js\";\r\nimport {a as aDom} from \"@react-spring/web\";\r\n \r\nextend({ OrbitControls });\r\n\r\n\r\nconst CameraControls = (() => {\r\n\r\n    // Get a reference to the Three.js Camera, and the canvas html element.\r\n  // We need these to setup the OrbitControls component.\r\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\r\n\r\n  const {\r\n    camera,\r\n    gl: {domElement}\r\n  } = useThree()\r\n\r\n  const controls = useRef();\r\n  // const Camera = new THREE.PerspectiveCamera({fov: 60, position: [0, 600, 600], near: 0.1, far: 5000});\r\n  camera.position.x = 0;\r\n  camera.position.y = 0;\r\n  camera.position.z = 120;\r\n  camera.fov = 80;\r\n  camera.near = 0.1;\r\n  camera.far = 10000;\r\n\r\n  /// https://codeworkshop.dev/blog/2020-04-03-adding-orbit-controls-to-react-three-fiber/\r\n  useFrame(() => {controls.current.update()})\r\n\r\n  return <orbitControls ref={controls} args={[camera, domElement]} autoRotate={false} enableZoom={true} />\r\n\r\n})\r\n\r\nfunction App() {\r\n    const [rainParticleEnabled, onRainParticleEnabled] = useState(false);\r\n\r\n    const lowerBound = -100;\r\n    const highBound = 2400; \r\n\r\n    const [y] = useYScroll([lowerBound, highBound], { domTarget: window })\r\n\r\n\r\n    // https://dev.to/alexkhismatulin/update-boolean-state-right-with-react-hooks-3k2i\r\n  \r\n    const onSwitchToRainParticles = (() => {\r\n        console.log(\"test \"+ rainParticleEnabled)\r\n        if (rainParticleEnabled == true){\r\n            onRainParticleEnabled(false);        \r\n            setTimeout(100000)\r\n\r\n        }\r\n        else {\r\n            onRainParticleEnabled(true); \r\n            setTimeout(100000)\r\n\r\n        }\r\n\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n      setTimeout(100000)\r\n    }, [rainParticleEnabled])\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <button onClick={onSwitchToRainParticles}>Switch to Particle Stream</button> */}\r\n        <Canvas style={{height: 500, color: \"FF0000\"}}>\r\n            <CameraControls/>\r\n            <scene name=\"Scene\">\r\n\r\n            { rainParticleEnabled ? <Particles enabled={rainParticleEnabled}/> :\r\n             <RainParticles enabled={rainParticleEnabled}/>}\r\n             <Suspense fallback={null}>\r\n            {/* <CameraPath props={{controlPoints: [new THREE.Vector3(0,0,-3),new THREE.Vector3(0,0,-250), new THREE.Vector3(100,0,-500), new THREE.Vector3(-500,0,-500)], currentLocation: y}} /> */}\r\n            </Suspense>\r\n          </scene>\r\n        </Canvas>\r\n        {/* <aDom.div className=\"bar\" style={{ height: y.interpolate([-100, 2400], ['0%', '100%']) }} /> */}\r\n        </div>\r\n    )\r\n  }\r\n  \r\n  ReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}